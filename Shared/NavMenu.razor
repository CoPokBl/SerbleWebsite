@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<RequireLogin RedirectToLogin="false" Callback="LoginProcessed" NoLockdownCheck="true" RequiredAccessLevel="AccountAccessLevel.Disabled"></RequireLogin>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
    <a class="navbar-brand" href="/" style="padding-left: 20px"><img src="/assets/images/icon.png" width="41" height="41" alt="Serble Logo"></a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">

            <li class="nav-item">
                <a class="nav-link" href="/">Home</a>
            </li>

            <li class="nav-item">
                <a class="nav-link" href="/status">Status</a>
            </li>
            
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="gameDrop" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Games
                </a>
                <div class="dropdown-menu" aria-labelledby="gameDrop">
                    <a class="dropdown-item" href="/wordmaster">Word Master</a>
                </div>
            </li>

            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="infoDrop" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Info
                </a>
                <div class="dropdown-menu" aria-labelledby="infoDrop">
                    <a class="dropdown-item" href="/discord">Discord</a>
                    <a class="dropdown-item" href="/contact">Contact</a>
                </div>
            </li>
        </ul>
    </div>
    
    @if (_user != null) {
        <div class="dropdown text-end" style="padding-right: 180px;">
            <a href="#" class="d-block link-secondary text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
                @_user.Username
                @* <img src="https://github.com/mdo.png" alt="mdo" width="32" height="32" class="rounded-circle"> *@
            </a>
            <ul class="dropdown-menu text-small" aria-labelledby="dropdownUser1">
                <li><a class="dropdown-item" href="/oauthapps">My Applications</a></li>
                <li><a class="dropdown-item" href="/authorizedapps">Authorized Applications</a></li>
                <li><a class="dropdown-item" href="/account">Account</a></li>
                @if (_user.PermLevel > 1) {
                    <li><a class="dropdown-item" href="/admin">Admin Dashboard</a></li>
                }
                <li><hr class="dropdown-divider"></li>
                <li><button class="dropdown-item" type="button" @onclick="Logout">Logout</button></li>
            </ul>
        </div>
    }
    else if (_loggingIn) {
        <div class="dropdown text-end" style="padding-right: 180px;">
            <p>Loading...</p>
        </div>
    }
    else {
        <div class="dropdown text-end" style="padding-right: 180px;">
            <button type="button" class="btn btn-outline-light" @onclick="Login">Login</button>
        </div>
    }
    
</nav>

@code {

    private User? _user = null;
    private bool _loggingIn = false;

    private Task LoginProcessed((User?, string) data) {
        User? user = data.Item1;
        if (user == null) {
            return Task.CompletedTask;
        }
        _user = user;
        _loggingIn = false;
        ReloadText();
        return Task.CompletedTask;
    }
    
    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }

    private void Login() {
        NavigationManager.NavigateTo("/login?return_url=" + NavigationManager.Uri);
    }
    
    private async void Logout() {
        Cookie cookies = new (JsRuntime);
        await cookies.SetValue("token", "");
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
    
}