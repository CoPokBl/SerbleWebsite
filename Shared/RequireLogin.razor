@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@using GeneralPurposeLib
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient Http

@code {

    [Parameter]
    public Func<(User?, string), bool>? Callback { get; set; } = _ => true; 

    [Parameter]
    public bool RedirectToLogin { get; set; } = true;
    
    [Parameter]
    public bool RedirectToAccessDenied { get; set; }
    
    [Parameter]
    public bool NoLockdownCheck { get; set; }

    [Parameter]
    public AccountAccessLevel RequiredAccessLevel { get; set; } = AccountAccessLevel.Normal;

    private PageType PageType => RequiredAccessLevel switch {
        AccountAccessLevel.Normal => PageType.Account,
        AccountAccessLevel.Admin => PageType.Admin,
        _ => PageType.NonAccount
    };

    public void RunCheck(Func<(User?, string), bool> callback) {
        Callback = callback;
        RedirectToLogin = false;
        OnAfterRender(true);
    }

    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;
        Console.WriteLine("Attempting login check");
        Cookie cookieHandler = new (JsRuntime);

        // Attempt Login
        string tokenCookie = await cookieHandler.GetValue("token");
        if (tokenCookie == "") {
            // NotLoggedIn();
            // return;
            tokenCookie = "urmum";
        }
        
        SerbleApiResponse<User> response = await SerbleApiHandler.GetUser(tokenCookie);
        if (!response.Success) {
            Console.WriteLine(response.ErrorMessage);
            NotLoggedIn();
            return;
        }

        // If page returns false, then user is not allowed to access page
        if (!Callback!.Invoke((response.ResponseObject, tokenCookie))) {
            NotLoggedIn();
        }
    }
    
    private void NotLoggedIn(bool disabledAccount = false) {
        // Redirect if redirect is enabled
        Console.WriteLine("Not logged in");
        if (RedirectToAccessDenied) {
            NavigationManager.NavigateTo("/accessdenied?page=" + Uri.EscapeDataString(NavigationManager.Uri));
            return;
        }
        if (disabledAccount) {
            NavigationManager.NavigateTo("/accountdisabled");
            return;
        }
        if (RedirectToLogin) {
            NavigationManager.NavigateTo("/login?return_url=" + Uri.EscapeDataString(NavigationManager.Uri));
            return;
        }
        
        // Otherwise run callback with null user
        Callback!.Invoke((null, ""));
    }

    private void LockedDown() {
        NavigationManager.NavigateTo("/lockdown");
    }

}