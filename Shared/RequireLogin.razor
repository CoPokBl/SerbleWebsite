@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@using GeneralPurposeLib
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public Func<User?, bool>? Callback { get; set; } = _ => true; 

    [Parameter]
    public bool RedirectToLogin { get; set; } = true;
    
    [Parameter]
    public bool RedirectToAccessDenied { get; set; }
    
    [Parameter]
    public AccountAccessLevel RequiredAccessLevel { get; set; } = AccountAccessLevel.Normal;

    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;
        Cookie cookieHandler = new (JsRuntime);

        // Attempt Login
        string tokenCookie = await cookieHandler.GetValue("token");
        if (tokenCookie == "") {
            NotLoggedIn();
        }
        
        if (!new TokenHandler(Program.Config!).ValidateCurrentToken(tokenCookie, out Dictionary<string, string>? claims, out _)) {
            NotLoggedIn();
            return;
        }
        if (claims == null) { throw new Exception("Claims are null"); }
        
        // Get User
        Program.StorageService!.GetUser(claims["id"], out User? user);
        if (user == null) { NotLoggedIn(); return; }
        if (user.PermLevel < (int) RequiredAccessLevel) { NotLoggedIn(); return; }
        // TODO: Lockdowns
        // if (Program.AdminLockdown && RequiredAccessLevel == AccountAccessLevel.Admin) {
        //     Logger.Warn(user.Username + " tried to access admin page while admin lockdown is enabled. Blocked access.");
        //     NotLoggedIn(); 
        //     return;
        // }
        // if (Program.UserLockdown && user.PermLevel < (int) AccountAccessLevel.Admin) {
        //     Logger.Warn(user.Username + " tried to authenticate during user lockdown. Blocked access.");
        //     NotLoggedIn(); 
        //     return;
        // }

        // If page returns false, then user is not allowed to access page
        if (!Callback!.Invoke(user)) {
            NotLoggedIn();
        }
    }
    
    private void NotLoggedIn() {
        // Redirect if redirect is enabled
        if (RedirectToAccessDenied) {
            NavigationManager.NavigateTo("/accessdenied?page=" + Uri.EscapeDataString(NavigationManager.Uri));
            return;
        }
        if (RedirectToLogin) {
            NavigationManager.NavigateTo("/login?return_url=" + Uri.EscapeDataString(NavigationManager.Uri));
            return;
        }
        
        // Otherwise run callback with null user
        Callback!.Invoke(null);
    }

}