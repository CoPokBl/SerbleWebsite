@page "/account"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@using System.Text.RegularExpressions
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<RequireLogin Callback="LoginChecked"></RequireLogin>

@if (_user == null) {
   <div class="text-center">
      <h1>Loading...</h1>
   </div>
}
else {
   <div class="row">
      <div class="col-md-3 border-right">
         <div class="d-flex flex-column align-items-center text-center p-3 py-5"><img class="rounded-circle mt-5" width="150px" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg">
            <span class="font-weight-bold">@_user.Username</span><span> </span></div>
      </div>
      <div class="col-md-5 border-right">
         <div class="p-3 py-5">
            <div class="d-flex justify-content-between align-items-center mb-3">
               <h4 class="text-right">Profile Settings</h4>
            </div>
            <div class="row mt-2">
               <div class="col-md-6"><label class="labels">Username</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" type="text" class="form-control" placeholder="first name" value="@_user.Username" id="username"></div>
               @if (_errors.Contains(Error.UsernameInvalid)) {
                  <p style="color: red; font-size: 13px">Invalid Username</p>
               }
               else {
                  if (_errors.Contains(Error.UsernameTaken)) {
                     <p style="color: red; font-size: 13px">That username is already taken</p>
                  }
               }
            </div>
            <div class="row mt-3">
               <div class="col-md-12"><label class="labels">Email</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" type="text" class="form-control" placeholder="Email" value="@_user.Email" id="email"></div>
               @if (_errors.Contains(Error.EmailInvalid)) {
                  <p style="color: red; font-size: 13px">Invalid Email</p>
               }
               <div style="padding-top: 20px"></div>
               <hr/>
               <h4>Change Password</h4>
               <div class="col-md-12"><label class="labels">Password</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" id="password" type="password" class="form-control" placeholder="***********" value=""></div>
               <div class="col-md-12"><label class="labels">Confirm Password</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" id="confirmPassword" type="password" class="form-control" placeholder="***********" value=""></div>
               @if (_errors.Contains(Error.PasswordDifferent)) {
                  <p style="color: red; font-size: 13px">Passwords don't match</p>
               }
               <div style="padding-top: 20px"></div>
               <hr/>
            </div>
            <div class="row mt-3">
               <div class="col-md-6"><label class="labels">ID</label><input type="text" style="background-color: rgb(34, 34, 34); color: #ffffff" class="form-control" placeholder="country" value="@_user.Id" readonly></div>
            </div>
            <div class="mt-5 text-center"><button class="btn btn-primary profile-button" type="button" @onclick="Save">Save Changes</button></div>
         </div>
      </div>
   </div>
}

@code {
   private User? _user;
   private List<Error> _errors = new ();

   private void ReloadText() {
      InvokeAsync(StateHasChanged).Wait();
   }

   private bool LoginChecked(User user) {
      _user = user;
      ReloadText();
      return true;
   }

   private async void Logout() {
      Cookie cookies = new (JsRuntime);
      await cookies.SetValue("token", "", 0);
      NavigationManager.NavigateTo("/login", true);
   }
   
   private void RevokeApp(string app) {
      if (_user == null) return;
      List<AuthorizedApp> authedAppsList = _user.AuthorizedApps.ToList();
      authedAppsList.RemoveAll(x => x.AppId == app);
      _user.AuthorizedApps = authedAppsList.ToArray();
      _user.RegisterChanges();
      ReloadText();
   }

   private async void Save() {
      _errors.Clear();
      User newUser = _user!;
      HtmlInteractor interactor = new (JsRuntime);
      string username = await interactor.GetValue("username");
      string email = await interactor.GetValue("email");
      string password = await interactor.GetValue("password");
      string confirmPassword = await interactor.GetValue("confirmPassword");
      bool validationSuccess = true;
      
      if (email != "") {
         // Validate email with regex
         if (!Regex.IsMatch(email, @"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])")) {
            validationSuccess = false;
            _errors.Add(Error.EmailInvalid);
         }
      }
      else {
         Console.WriteLine("Email is empty");
      }

      if (username == "") {
         _errors.Add(Error.UsernameInvalid);
         validationSuccess = false;
      }
      
      Program.StorageService!.GetUserFromName(username, out User? existingUser);
      if (existingUser != null) {
         validationSuccess = false;
         _errors.Add(Error.UsernameTaken);
      }

      if (password != confirmPassword) {
         _errors.Add(Error.PasswordDifferent);
         validationSuccess = false;
      }

      ReloadText();
      if (!validationSuccess) {
         return;
      }

      newUser.Email = email;
      newUser.Username = username;
      newUser.PasswordHash = Utils.Hash(password);
      newUser.RegisterChanges();
      NavigationManager.NavigateTo(NavigationManager.Uri, true);
   }

   enum Error {
      None,
      UsernameTaken,
      UsernameInvalid,
      EmailInvalid,
      PasswordDifferent
   }
   
}