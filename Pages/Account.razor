@page "/account"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<RequireLogin Callback="LoginChecked"></RequireLogin>

<h3>Account</h3>

@if (_user == null) {
   <p>Loading...</p>
}
else {
   <p>
      <div>ID: @_user.Id</div>
      <div>Username: @_user.Username</div>
      <div>Email: @_user.Email</div>
      <div>Perm Level: @_user.PermLevel</div>
      <div>Perm String: @_user.PermString</div>

      <div>Authorized Apps:</div>
      @foreach (string app in _user.AuthorizedAppIds) {
         Program.StorageService!.GetOAuthApp(app, out OAuthApp? appObj);
         if (appObj == null) continue;
         string appName = appObj.Name;
         <div>
            - @appName
            <button @onclick="() => RevokeApp(app)">Revoke Access</button>
         </div>
      }
   </p>
}

<button @onclick="Logout">Logout</button>
<button @onclick="ReloadText">Reload Text</button>

@code {
   private User? _user;
   
   private void ReloadText() {
      InvokeAsync(StateHasChanged).Wait();
   }

   private bool LoginChecked(User user) {
      _user = user;
      ReloadText();
      return true;
   }

   private async void Logout() {
      Cookie cookies = new (JsRuntime);
      await cookies.SetValue("token", "", 0);
      NavigationManager.NavigateTo("/login", true);
   }
   
   private void RevokeApp(string app) {
      if (_user == null) return;
      List<(string, string)> authedAppsList = _user.AuthorizedApps.ToList();
      authedAppsList.RemoveAll(x => x.Item1 == app);
      _user.AuthorizedApps = authedAppsList.ToArray();
      _user.RegisterChanges();
      ReloadText();
   }
   
}