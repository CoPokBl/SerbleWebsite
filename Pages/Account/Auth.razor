@page "/auth"
@page "/login"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@using GeneralPurposeLib
@using System.Collections.Specialized
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Localiser Localiser

<PublicPage></PublicPage>
<LoginStyles></LoginStyles>

<div class="text-center form-signin">
    
    @if (_loading) {
        <h3>@Localiser["loading"]</h3>
    }
    else {
        <form onsubmit="return false">
            <img class="mb-4" src="assets/images/icon.png" alt="" width="72" height="72">
            <h1 class="h3 mb-3 fw-normal">@Localiser["sign-in"]</h1>

            <div style="color: red;">
                @switch (_error) {

                    case Error.None:
                        break;

                    case Error.NullFields:
                        <p>@Localiser["username-password-required"]</p>
                        break;

                    case Error.InvalidCredentials:
                        <p>@Localiser["invalid-creds-need-account"] <a href="/register" onclick="window.location='register'+window.location.search;">@Localiser["register"]</a></p>
                        break;

                    case Error.AccountDisabled:
                        <p>@Localiser["account-disabled"]</p>
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </div>

            <div class="form-floating">
                <input
                    type="text"
                    class="form-control"
                    id="floatingUsername"
                    placeholder="@Localiser["username"]"
                    style="background-color: rgb(34, 34, 34); color: #ffffff">
                <label for="floatingUsername">@Localiser["username"]</label>
            </div>
            <div class="form-floating">
                <input
                    type="password"
                    class="form-control"
                    id="floatingPassword"
                    placeholder="@Localiser["password"]"
                    style="background-color: rgb(34, 34, 34); color: #ffffff">
                <label for="floatingPassword">@Localiser["password"]</label>
            </div>

            <div class="checkbox mb-3">
                <label>
                    <input
                        type="checkbox"
                        value="remember-me"
                        @bind="_rememberMe"
                        @oninput="ui => _rememberMe = bool.Parse(ui.Value?.ToString()!.ToLower()!)"> @Localiser["remember-me"]
                </label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" @onclick="Login" style="padding-bottom: 10px">@Localiser["sign-in"]</button>
            @if (_supportsPasskeys) {
                <button class="w-100 btn btn-lg btn-secondary" style="padding-bottom: 10px; padding-top: 10px" @onclick="PasskeyLogin">@Localiser["login-with-passkey"]</button>
            }
            <p>@Localiser["dont-have-account"] <a href="/register" onclick="window.location='register'+window.location.search;">@Localiser["register-for-free"]</a></p>
        </form>
        
        <form @onsubmit='() => Console.WriteLine("Submitted webauthn field")' hidden>
            <input type="text" name="username" autocomplete="username webauthn" hidden>
        </form>
    }

</div>

@code {
    private bool _rememberMe;
    private bool _supportsPasskeys = false;
    private Error _error = Error.None;
    private bool _loading = true;

    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;

        HtmlInteractor js = new(JsRuntime);
        _supportsPasskeys = await js.DoesSupportPasskeys();  // TODO: Do something with this info
        
        TokenManager tok = new(JsRuntime);

        // Check if user is logged in.
        string token = await tok.GetToken();
        if (token == "") {
            _loading = false;
            ReloadText();
            return;
        }

        // Check login
        SerbleApiResponse<User> response = await SerbleApiHandler.GetUser(token);
        if (!response.Success) {
            _loading = false;
            ReloadText();
            return;
        }
        _loading = false;
        LoginSuccess();
    }

    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }

    private void Login() {
        _loading = true;
        ReloadText();
        LoginMain();
        _loading = false;
        ReloadText();
    }

    private async Task PasskeyLogin() {
        HtmlInteractor js = new(JsRuntime);
        
    }

    private async void LoginMain() {
        HtmlInteractor htmlInteractor = new(JsRuntime);
        string username = await htmlInteractor.GetValue("floatingUsername");
        string password = await htmlInteractor.GetValue("floatingPassword");

        // Attempt login
        SerbleApiResponse<(bool, string)> response;

        try {
            response = await SerbleApiHandler.LoginUser(username, password);
        }
        catch (Exception e) {
            response = new SerbleApiResponse<(bool, string)>(false, e.Message);
        }
        
        if (!response.Success) {
            Console.WriteLine(response.ErrorMessage);
            _error = Error.InvalidCredentials;
            ReloadText();
            return;
        }

        if (response.ResponseObject.Item1) {
            // MFA is required
            Console.WriteLine("MFA is required");
            NavigationManager.NavigateTo("/mfa" +
                                         "?mfa_token=" + response.ResponseObject.Item2 + "" +
                                         "&return_url=" + NavigationManager.Uri + "" +
                                         "&remember_me=" + _rememberMe);
            return;
        }

        // Login successful
        string token = response.ResponseObject.Item2.ThrowIfNull();
        Console.WriteLine("Token: " + token);

        // Set cookie
        TokenManager tok = new(JsRuntime);
        await tok.SetToken(token, _rememberMe);
        Console.WriteLine("Logged in!");
        
        // Get user language
        SerbleApiResponse<User> userResponse = await SerbleApiHandler.GetUser(token);
        if (!userResponse.Success) {
            Console.WriteLine(userResponse.ErrorMessage);
            _error = Error.InvalidCredentials;
            ReloadText();
            return;
        }
        string? lang = userResponse.ResponseObject.ThrowIfNull().Language;
        if (lang != null) {
            await htmlInteractor.SetLanguage(lang);
        }
        
        LoginSuccess();
    }

    private void LoginSuccess() {
        // Normal login
        NameValueCollection queryValues = NavigationManager.GetQueryStrings();
        NavigationManager.NavigateTo(queryValues.AllKeys.Contains("return_url") ? queryValues.Get("return_url").ThrowIfNull() : "/account", true);
    }

    enum Error {
        None,
        NullFields,
        InvalidCredentials,
        AccountDisabled
    }

}