@page "/mfa"
@using SerbleWebsite.Data
@using GeneralPurposeLib
@using SerbleWebsite.Data.Schemas
@using System.Collections.Specialized
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Localiser Localiser

<LoginStyles></LoginStyles>

<div class="text-center form-signin">
    
    @if (_loading) {
        <h3>@Localiser["loading"]</h3>
    }
    else {
        <form onsubmit="return false">
            <img class="mb-4" src="assets/images/icon.png" alt="" width="72" height="72">
            <h1 class="h3 mb-3 fw-normal">@Localiser["2fa"]</h1>

            <div style="color: red;">
                @switch (_error) {

                    case Error.None:
                        break;

                    case Error.InvalidCode:
                        <p>@Localiser["invalid-code"]</p>
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </div>

            <div class="form-floating">
                <input
                    type="text"
                    class="form-control"
                    id="otp"
                    placeholder="@Localiser["otp-code"]"
                    style="background-color: rgb(34, 34, 34); color: #ffffff">
                <label for="otp">@Localiser["otp-code"]</label>
            </div>
            
            <button class="w-100 btn btn-lg btn-primary" @onclick="Submit" style="padding-bottom: 10px">@Localiser["sign-in"]</button>
        </form>
    }

</div>

@code {
    private Error _error = Error.None;
    private bool _loading = true;
    
    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;
        Cookie cookieService = new (JsRuntime);

        // Check if user is logged in.
        string token = await cookieService.GetValue("token");
        if (token == "") {
            _loading = false;
            ReloadText();
            return;
        }

        // Check login
        SerbleApiResponse<User> response = await SerbleApiHandler.GetUser(token);
        if (!response.Success) {
            _loading = false;
            ReloadText();
            return;
        }
        _loading = false;
        LoginSuccess();
    }

    private async void Submit() {
        string? mfaToken = NavigationManager.GetQueryStrings("mfa_token");
        bool rememberMe = NavigationManager.GetQueryStrings("remember_me") == "true";
        
        HtmlInteractor interactor = new(JsRuntime);
        string code = await interactor.GetValue("otp");

        SerbleApiResponse<string> response = await SerbleApiHandler.SubmitTotpCode(mfaToken!, code);
        if (!response.Success) {
            _error = Error.InvalidCode;
            ReloadText();
            return;
        }

        string token = response.ResponseObject.ThrowIfNull();
        
        // Set cookie
        Cookie cookieService = new (JsRuntime);
        await cookieService.SetValue("token", token, rememberMe ? 24 * 365 : 1);
        Console.WriteLine("Logged in!");
        
        // Get user language
        SerbleApiResponse<User> userResponse = await SerbleApiHandler.GetUser(token);
        if (!userResponse.Success) {
            Console.WriteLine(userResponse.ErrorMessage);
            NavigationManager.NavigateTo("/error?error=" + userResponse.ErrorMessage);
            return;
        }
        string? lang = userResponse.ResponseObject.ThrowIfNull().Language;
        if (lang != null) {
            await interactor.SetLanguage(lang);
        }
        
        LoginSuccess();
    }
    
    private void LoginSuccess() {
        // Normal login
        NameValueCollection queryValues = NavigationManager.GetQueryStrings();
        NavigationManager.NavigateTo(queryValues.AllKeys.Contains("return_url") ? queryValues.Get("return_url").ThrowIfNull() : "/account", true);
    }
    
    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }
    
    enum Error {
        None,
        InvalidCode
    }
    
}