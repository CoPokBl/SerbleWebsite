@page "/oauth/authorize"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@using SerbleAPI.Data
@using System.Collections.Specialized
@inject NavigationManager NavigationManager
@inject Localiser Localiser

<RequireLogin Callback="LoginCallback"></RequireLogin>

<LoginStyles></LoginStyles>

<div class="text-center form-signin">

    @if (_loading) {
        <h3>@Localiser["loading"]</h3>
    }
    else {
        <h1>@_appName</h1>
        <p>
            <div>
                @(Localiser["oauth-warning"].Replace("{app}", _appName))
            </div>

            <p>
                <br/>
                <ul style="text-align: left">
                    @code {
                        bool _any;
                    }
                    @foreach (string scope in
                        ScopeHandler.ListOfScopeIdsToScopeNames(
                            ScopeHandler.FilterInvalidScopes(
                                _queryValues!["scope"]!.Split(' ')))) {
                        _any = true;
                        <li><a href="javascript: void(0)" data-bs-toggle="tooltip" data-bs-placement="left" title="@ScopeHandler.GetDescriptionFromName(scope)">@scope</a></li>
                    }
                    @if(!_any) {
                        <li>@Localiser["none"]</li>
                    }
                </ul>
            </p>
            <b>@Localiser["click-deny-if-confused"]</b>
        </p>
        <div class="d-flex" style="">
            <button class="w-100 btn btn-lg btn-primary" @onclick="_ => AuthorizeApp(true)" style="margin-right: 10px">@Localiser["allow"]</button>
            <button class="w-100 btn btn-lg btn-danger" @onclick="_ => AuthorizeApp(false)" style="padding-bottom: 10px">@Localiser["deny"]</button>
        </div>
    }

</div>

@code {
    private NameValueCollection? _queryValues;
    private PublicOAuthApp? _app;
    private string _appName = "";
    private string? _token;
    private bool _loading = true;
    private User? _user;

    private readonly string[] _requiredQueryValues = {
        "redirect_uri",
        "client_id",
        "response_type",
        "scope",
        "state"
    };

    public Task LoginCallback((User?, string) data) {
        _token = data.Item2;
        _user = data.Item1;
        LoginCallbackVoid();
        _loading = false;
        return Task.CompletedTask;
    }

    public async void LoginCallbackVoid() {
        _queryValues = NavigationManager.GetQueryStrings();

        // Check required query parameters
        if (_requiredQueryValues.Any(requiredQueryValue => !_queryValues!.AllKeys.Contains(requiredQueryValue))) {
            NavigationManager.NavigateTo("/invalidoauth");
            return;
        }

        // Get information
        SerbleApiResponse<PublicOAuthApp> response = await SerbleApiHandler.GetPublicAppInfo(_queryValues["client_id"]!);
        if (!response.Success) {
            if (response.ErrorFlag == "not-found") {
                NavigationManager.NavigateTo("/invalidoauth");
                return;
            }
            // Unknown error
            Console.WriteLine("Unknown error: " + response.ErrorMessage);
            NavigationManager.NavigateTo("/error?msg=" + response.ErrorMessage);
            return;
        }
        PublicOAuthApp app = response.ResponseObject!;
        _appName = app.Name!;
        _app = app;
        
        // Check if app is already authorized
        if (_user == null) {
            throw new Exception("User is null");
        }
        if (_user!.AuthorizedApps!.Any(authedApp => authedApp.AppId == app.Id)) {
            AuthorizeApp(true);
            return;
        }
        
        _loading = false;
        ReloadText();
    }

    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }
    
    private async void AuthorizeApp(bool authorize) {
        _loading = true;
        if (!Uri.TryCreate(_queryValues!["redirect_uri"], UriKind.Absolute, out _)) {
            NavigationManager.NavigateTo("/noredirect");
            return;
        }
        string newUri = _queryValues["redirect_uri"]!;
        if (newUri != _app!.RedirectUri) {
            NavigationManager.NavigateTo("/invalidoauth");
            return;
        }
        string state = _queryValues["state"]!;
        // Check if state contains symbols
        if (state.Any(c => !char.IsLetterOrDigit(c))) {
            NavigationManager.NavigateTo("/invalidoauth");
            return;
        }

        string? authCode = null;
        if (authorize) {
            // Get token
            string scopeString = ScopeHandler.ListOfScopeIdsToString(_queryValues!["scope"]!.Split(' '));
            SerbleApiResponse<string> response = await SerbleApiHandler.AuthorizeApp(_token!, _app!.Id!, scopeString);
            if (!response.Success) {
                if (response.ErrorFlag == "bad-app") {
                    NavigationManager.NavigateTo("/invalidoauth");
                    return;
                }
                Console.WriteLine("Unknown error: " + response.ErrorMessage);
                NavigationManager.NavigateTo("/error?msg=" + response.ErrorMessage);
                return;
            }
            authCode = response.ResponseObject!;
        }
        newUri += "?state=" + state;
        newUri += authCode == null ? "" : "&code=" + authCode;
        newUri += "&authorized=" + (authorize ? "true" : "false");
        NavigationManager.NavigateTo(newUri);
    }

}