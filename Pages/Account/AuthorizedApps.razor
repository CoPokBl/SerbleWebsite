@page "/AuthorizedApps"
@using SerbleWebsite.Data.Schemas
@using SerbleWebsite.Data
@using GeneralPurposeLib
@using SerbleAPI.Data
@inject NavigationManager NavigationManager

<RequireLogin Callback="LoginChecked"></RequireLogin>

<div class="text-center">
    <br/>
    <h3>Authorized Applications</h3>
    <hr/>
</div>


<div style="padding: 30px">
    @if (_user == null) {
        <h2>Loading...</h2>
    }
    else {
        @for (int i = 0, x = 0; i < _publicApps.Count / 2 + 1; i++) {
            <div class="row align-items-md-stretch" style="padding-bottom: 20px">
                @for (int y = 0; y < 2; y++) {
                    if (x > _publicApps.Count - 1) {
                            continue;
                    }
                    (PublicOAuthApp, string) app = _publicApps[x];
                    
                    <div class="col-md-6">
                        <div class="h-100 p-5 bg-dark border rounded-3">
                            <h2>@app.Item1.Name</h2>
                            <p>@app.Item1.Description</p>
                            <h5>Scopes:</h5>
                            <ul>
                                @foreach (string scope in
                                    ScopeHandler.ListOfScopeIdsToScopeNames(ScopeHandler.StringToListOfScopeIds(app.Item2))) {
                                    <li><a href="javascript: void(0)" data-bs-toggle="tooltip" data-bs-placement="left" title="@ScopeHandler.GetDescriptionFromName(scope)">@scope</a></li>
                                }
                            </ul>
                            <button class="btn btn-outline-danger" type="button" @onclick="_ => RevokeApp(app.Item1.Id)">Revoke Access</button>
                        </div>
                    </div>
                    x++;
                }
            </div>
        }
    }
</div>


@code {
    private User? _user;
    private string _token = "";
    private AuthorizedApp[]? _authorizedApps;
    private readonly List<(PublicOAuthApp, string)> _publicApps = new();

    private async Task LoginChecked((User?, string) data) {
        if (data.Item1 == null) {
            throw new Exception("User is null");
        }
        User user = data.Item1!;
        _token = data.Item2;
        _authorizedApps = user.AuthorizedApps;
        _user = user;
        foreach (AuthorizedApp authorizedApp in _authorizedApps!) {
            PublicOAuthApp? app = (await SerbleApiHandler.GetPublicAppInfo(authorizedApp.AppId))
                .DefaultIfFalse(resp => resp!.Success)
                .IfNotNull(resp => resp.ResponseObject);
            if (app == null) {
                Console.WriteLine("Could not find app with id " + authorizedApp.AppId);
                continue;
            }
            _publicApps.Add((app, authorizedApp.Scopes));
        }
        ReloadText();
    }
    
    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }
    
    private async Task RevokeApp(string app) {
        if (_user == null) return;
        // Revoke the app, duh
        SerbleApiResponse<string> response = await SerbleApiHandler.DeAuthorizeApp(_token, app);
        if (!response.Success) {
            Console.WriteLine("Failed to revoke app: " + response.ErrorMessage);
            return;
        }
        Console.WriteLine("Revoked app " + app);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
    
}