@page "/SetupTOTP"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@inject ImageService ImageService
@inject NavigationManager NavigationManager
@inject Localiser Localiser
@inject IJSRuntime JsRuntime

<RequireLogin Callback="Login"></RequireLogin>

<div class="d-flex flex-row justify-content-center">
    <div class="p-4 half-page justify-content-center text-center">
        <div class="bg-black bg-opacity-25 rounded-3 p-4">
            <h3>@Localiser["setup-totp-app"]</h3>
            <p>
                @Localiser["setup-totp-instructions"]
            </p>
            <img src="@ImageSrc" class="crisp-image" height="300" width="300" alt="QR Code for setting up a TOTP App"/>
            <p class="text-danger pt-2">
                @Localiser["totp-warning"]
            </p>
        </div>
        
    </div>
    
    <div class="text-center form-setup-2fa half-page justify-content-center">

        @if (_loading) {
            <h3>@Localiser["loading"]</h3>
        }
        else {
            <form onsubmit="return false">
                <img class="mb-4" src="assets/images/icon.png" alt="" width="72" height="72">
                <h1 class="h3 mb-3 fw-normal">@Localiser["2fa"]</h1>

                <div style="color: red;">
                    @switch (_error) {

                        case Error.None:
                            break;

                        case Error.InvalidCode:
                            <p>@Localiser["invalid-code"]</p>
                            break;

                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </div>

                <div class="form-floating">
                    <input
                        type="text"
                        class="form-control"
                        id="otp"
                        placeholder="@Localiser["otp-code"]"
                        style="background-color: rgb(34, 34, 34); color: #ffffff">
                    <label for="otp">@Localiser["otp-code"]</label>
                </div>

                <button class="w-100 btn btn-lg btn-primary" @onclick="Submit" style="padding-bottom: 10px">@Localiser["submit"]</button>
            </form>

        }

    </div>
</div>



@code {
    private string? ImageSrc { get; set; }
    private Error _error = Error.None;
    private bool _loading = true;
    private User? _user;
    private string? _token;
    
    private async Task Login((User?, string) data) {
        Stream imageData = await ImageService.GetImageStreamAsync(Constants.SerbleApiUrl + "account/mfa/totp/qrcode", data.Item2);
        MemoryStream memoryStream = new();
        await imageData.CopyToAsync(memoryStream);
        string base64String = Convert.ToBase64String(memoryStream.ToArray());
        ImageSrc = $"data:image/png;base64,{base64String}";
        _loading = false;
        _user = data.Item1;
        _token = data.Item2;
        ReloadText();
    }
    
    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }

    private async void Submit() {
        HtmlInteractor interactor = new(JsRuntime);
        string totpCode = await interactor.GetValue("otp");

        SerbleApiResponse<bool> response = await SerbleApiHandler.SubmitTotpCode(_token!, totpCode);
        if (!response.Success) {
            Console.WriteLine("WHAT bad idk man");
            return;
        }
        if (!response.ResponseObject) {
            _error = Error.InvalidCode;
            ReloadText();
            return;
        }
        await Enable2Fa();
        NavigationManager.NavigateTo("/account", true);
    }
    
    private async Task Enable2Fa() {
        List<PatchEditRequest> edits = new() {
            new PatchEditRequest("TotpEnabled", "true")
        };

        SerbleApiResponse<User> response = await SerbleApiHandler.EditUser(_token!, edits.ToArray());
        if (!response.Success) {
            // Fail
            switch (response.ErrorFlag) {
                default:
                    Console.WriteLine("Unknown error");
                    return;
                  
                case "bad-field":
                    Console.WriteLine("Bad field wtf");
                    break;
            }
            ReloadText();
            return;
        }
        // Success
        _user!.TotpEnabled = true;
        ReloadText();
    }

    enum Error {
        None,
        InvalidCode
    }
    
}