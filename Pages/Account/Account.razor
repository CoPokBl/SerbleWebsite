@page "/account"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Schemas
@using System.Text.RegularExpressions
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Localiser Localiser

<RequireLogin Callback="LoginChecked"></RequireLogin>

@if (_user == null) {
   <div class="text-center">
      <h1>@Localiser["loading"]</h1>
   </div>
}
else {
   <div class="row">
      <div class="col-md-3 border-right">
         <div class="d-flex flex-column align-items-center text-center p-3 py-5"><img class="rounded-circle mt-5" width="150px" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg">
            <span class="font-weight-bold">@_user.Username</span><span> </span></div>
      </div>
      <div class="col-md-5 border-right">
         <div class="p-3 py-5">
            <div class="d-flex justify-content-between align-items-center mb-3">
               <h4 class="text-right">@Localiser["profile-settings"]</h4>
            </div>
            <div class="row mt-2">
               <div class="col-md-6"><label class="labels">@Localiser["username"]</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" type="text" class="form-control" placeholder="@Localiser["username"]" value="@_user.Username" id="username"></div>
               @if (_errors.Contains(Error.UsernameInvalid)) {
                  <p style="color: red; font-size: 13px">@Localiser["invalid-username"]</p>
               }
               else {
                  if (_errors.Contains(Error.UsernameTaken)) {
                     <p style="color: red; font-size: 13px">@Localiser["username-taken"]</p>
                  }
               }
            </div>
            <div class="row mt-3">
               <div class="col-md-12">
                  <label class="labels">
                     @Localiser["email"] @((string.IsNullOrWhiteSpace(_user.Email) ?
                                            "" :
                                            _verifiedEmail ?
                                               $"<span class='text-success'>({Localiser["verified"]})</span>" :
                                               $"<span class='text-warning'>({Localiser["not-verified"]})</span>").MarkupString())
                  </label><input style="background-color: rgb(34, 34, 34); color: #ffffff" type="text" class="form-control" placeholder="@Localiser["email"]" value="@_user.Email" id="email">
               </div>
               @if (_errors.Contains(Error.EmailInvalid)) {
                  <p style="color: red; font-size: 13px">@Localiser["invalid-email"]</p>
               }
               
               <div class="row mt-2">
                  <div class="col-md-6">
                     <label class="labels">@Localiser["language"]</label>
                     <LanguageDropdown DefaultValue="@_user.Language" Placeholder="Choose Language" Class="form-control text-white" Style="background-color: rgb(34, 34, 34); color: #ffffff" Id="language"></LanguageDropdown>
                  </div>
               </div>
               
               <div style="padding-top: 20px"></div>
               <hr/>
               
               <h4>@Localiser["change-password"]</h4>
               <div class="col-md-12"><label class="labels">@Localiser["password"]</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" id="password" type="password" class="form-control" placeholder="***********" value=""></div>
               <div class="col-md-12"><label class="labels">@Localiser["confirm-password"]</label><input style="background-color: rgb(34, 34, 34); color: #ffffff" id="confirmPassword" type="password" class="form-control" placeholder="***********" value=""></div>
               @if (_errors.Contains(Error.PasswordDifferent)) {
                  <p style="color: red; font-size: 13px">@Localiser["passwords-dont-match"]</p>
               }
               <div style="padding-top: 20px"></div>
               <hr/>
               
            </div>

            <div class="row mt-3">
               <div class="col-md-6"><label class="labels">@Localiser["id"]</label><input type="text" style="background-color: rgb(34, 34, 34); color: #ffffff" class="form-control" placeholder="@Localiser["id"]" value="@_user.Id" readonly></div>
               <div class="col-md-6"><label class="labels">@Localiser["account-type"]</label><input type="text" style="background-color: rgb(34, 34, 34); color: #ffffff" class="form-control" placeholder="Normal" value="@(((AccountAccessLevel) Enum.ToObject(typeof(AccountAccessLevel), _user.PermLevel ?? 1)).ToString())" readonly></div>
               <div class="col-md-6"><label class="labels">@Localiser["premium-level"]</label><input type="text" style="background-color: rgb(34, 34, 34); color: #ffffff" class="form-control" placeholder="Normal" value="@_premiumText" readonly></div>
            </div>
            <div class="mt-5 text-center"><button class="btn btn-primary profile-button" type="button" @onclick="Save">@Localiser["save-changes"]</button></div>
         </div>
      </div>
   </div>
}

@code {
   private User? _user;
   private string _token = "";
   private readonly List<Error> _errors = new ();
   private bool _verifiedEmail;
   private string _premiumText = "Loading...";

   private void ReloadText() {
      InvokeAsync(StateHasChanged).Wait();
   }

   private async Task LoginChecked((User?, string) info) {
      _user = info.Item1;
      _token = info.Item2;
      _verifiedEmail = _user!.VerifiedEmail;
      Console.WriteLine($"{_user!.Username} is logged in");
      ReloadText();
      
      // Products
      SerbleApiResponse<string[]> productsResponse = await SerbleApiHandler.GetUsersOwnedProducts(_token);
      if (!productsResponse.Success) {
         _premiumText = Localiser["unknown"];
         ReloadText();
         return;
      }
      _premiumText = productsResponse.ResponseObject!.Contains("premium") ? Localiser["account-type-premium"] : Localiser["account-type-free"];
      ReloadText();
   }

   private async void Logout() {
      Cookie cookies = new (JsRuntime);
      await cookies.SetValue("token", "", 0);
      NavigationManager.NavigateTo("/login", true);
   }

   private async void Save() {
      _errors.Clear();
      User newUser = _user!;
      HtmlInteractor interactor = new (JsRuntime);
      string username = await interactor.GetValue("username");
      string email = await interactor.GetValue("email");
      string language = await interactor.GetValue("language");
      string password = await interactor.GetValue("password");
      string confirmPassword = await interactor.GetValue("confirmPassword");
      bool validationSuccess = true;

      // Client side field validation
      if (username == "") {
         _errors.Add(Error.UsernameInvalid);
         validationSuccess = false;
      }
      
      if (email != "" && email != _user!.Email) {
      // Validate email with regex
         if (!Regex.IsMatch(email, @"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])")) {
            validationSuccess = false;
            _errors.Add(Error.EmailInvalid);
         }
      }
      
      if (password != "") {
         if (password != confirmPassword) {
            _errors.Add(Error.PasswordDifferent);
            validationSuccess = false;
         }
      }

      ReloadText();
      if (!validationSuccess) {
         return;
      }
      
      // Add edits
      List<PatchEditRequest> edits = new();

      if (_user!.Username != username) {
         Console.WriteLine("Username changed (from " + _user!.Username + " to " + username + ")");
         edits.Add(new PatchEditRequest("Username", username));
      }

      if (_user.Email != email) {
         Console.WriteLine("Email changed (from " + _user.Email + " to " + email + ")");
         edits.Add(new PatchEditRequest("Email", email));
      }

      if (language != "" && language != _user.Language) {
         Console.WriteLine("Language changed (from " + _user.Language + " to " + language + ")");
         edits.Add(new PatchEditRequest("Language", language));
         
         // Update website language
         await interactor.SetLanguage(language);
      }

      if (password != "") {
         edits.Add(new PatchEditRequest("Password", password));
      }

      SerbleApiResponse<User> response = await SerbleApiHandler.EditUser(_token, edits.ToArray());
      if (!response.Success) {
         // Fail
         switch (response.ErrorFlag) {
            default:
               Console.WriteLine("Unknown error");
               return;
               
            case "name-taken":
               _errors.Add(Error.UsernameTaken);
               break;
               
            case "email-invalid":
               _errors.Add(Error.EmailInvalid);
               break;
                  
            case "bad-field":
               Console.WriteLine("Bad field wtf");
               break;
         }
         ReloadText();
         return;
      }
      // Success
      NavigationManager.NavigateTo(NavigationManager.Uri, true);
   }

   enum Error {
      UsernameTaken,
      UsernameInvalid,
      EmailInvalid,
      PasswordDifferent
   }
   
}
