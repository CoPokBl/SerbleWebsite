@page "/vault/Notes"
@page "/notes"
@using SerbleWebsite.Data.Schemas
@using SerbleWebsite.Data
@using GeneralPurposeLib
@using System.Text
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject Localiser Localiser

<RequireLogin Callback="Login"></RequireLogin>

<div class="d-flex flex-row notes-box">
    <div class="d-flex flex-column align-items-stretch flex-shrink-0 bg-black bg-opacity-50 notes-height-setting" style="width: 380px;">
        <div href="/" class="d-flex align-items-center flex-shrink-0 p-3 link-light text-decoration-none border-bottom">
            <svg class="bi me-2" width="30" height="24"><use xlink:href="#bootstrap"/></svg>
            <span class="fs-5 fw-semibold">@Localiser["notes"]</span>
        </div>
        <div class="list-group list-group-flush border-bottom scrollarea">
            @foreach (string noteId in _notes ?? Array.Empty<string>()) {
                <button href="#" @onclick="() => ApplyNote(noteId)" class="text-light list-group-item list-group-item-action @(_currentNoteId == noteId ? "bg-dark " : "text-opacity-75 bg-black bg-opacity-50 ")py-3 lh-tight" aria-current="true">
                    <div class="d-flex w-100 align-items-center justify-content-between">
                        <strong class="mb-1">@(_noteTitles.TryGetValue(noteId, out string? title) ? title : noteId)</strong>
                        <small><button @onclick="() => DeleteNote(noteId)" class="btn btn-link text-danger">@Localiser["delete"]</button></small>
                    </div>
                    <div class="col-10 mb-1 small">@(_contentSummaries.TryGetValue(noteId, out string? desc) ? desc : "Click to load info.")</div>
                </button>
            }
        </div>
        
        <div class="editor-section-button">
            <button class="btn btn-primary" @onclick="() => NewNote(true)">@Localiser["new-encrypted-note"]</button>
            <button class="btn btn-secondary" @onclick="() => NewNote(false)">@Localiser["new-note"]</button>
        </div>
    </div>
    
    <div class="full-page-textarea">
        @if (_noteIsEncrypted && _currentDecryptedContent == null) {
            <div class="text-center editor-section-vault-height">
                @if (_encryptedNoteIsEmpty) {
                    <h3 class="pt-5">@Localiser["set-encryption-password"]</h3>
                    <div class="form-floating align-items-center d-flex flex-row">
                        <div style="flex: 1"></div>
                        <div style="flex: 1">
                            <input
                                type="password"
                                class="form-control"
                                id="password"
                                placeholder="Password"
                                style="background-color: rgb(34, 34, 34); color: #ffffff;">
                        </div>
                        <div style="flex: 1"></div>
                    </div>
                    <button class="btn btn-primary" @onclick="SetPassword">Set Password</button>
                }
                else {
                    <h3 class="pt-5">@Localiser["note-is-encrypted"]</h3>
                    @if (_incorrectPasswordAttempts != 0) {
                        <p class="text-danger">@Localiser["incorrect-password"] (@_incorrectPasswordAttempts)</p>
                    }
                    <div class="form-floating align-items-center d-flex flex-row">
                        <div style="flex: 1"></div>
                        <div style="flex: 1">
                            <input
                                type="password"
                                class="form-control"
                                id="password"
                                placeholder="Password"
                                style="background-color: rgb(34, 34, 34); color: #ffffff;">
                        </div>
                        <div style="flex: 1"></div>
                    </div>
                    <button class="btn btn-primary" @onclick="DecryptNote">@Localiser["decrypt"]</button>
                }
            </div>
        }
        else {
            @if (_noteIsEncrypted) {
                <textarea @oninput="UserInput" id="note-content" class="bg-black bg-opacity-50 text-white form-control editor-section-vault" @bind="_currentDecryptedContent">@_currentDecryptedContent</textarea>
            }
            else {
                <textarea @oninput="UserInput" id="note-content" class="bg-black bg-opacity-50 text-white form-control editor-section-vault" @bind="_currentNote">@_currentNote</textarea>
            }
        }
        <button id="save-button" disabled class="btn btn-success editor-section-button" @onclick="UpdateNote">@_saveButtonText</button>
    </div>
    
</div>

@code {
    private string[]? _notes;
    private string? _currentNote = Localisation.Localiser["no-note-selected"];
    private string? _currentDecryptedContent;
    private string? _currentNoteId;
    private bool _noteIsEncrypted;
    private bool _encryptedNoteIsEmpty;
    private int _incorrectPasswordAttempts;
    private bool _textSaved = true;
    private string? _token;
    private string _saveButtonText = Localisation.Localiser["save"];
    private readonly Dictionary<string, string> _noteTitles = new();
    private readonly Dictionary<string, string> _contentSummaries = new();
    private readonly Dictionary<string, string> _loadedNotes = new();
    private Dictionary<string, string> _passwords = new();

    private const string EncryptionHeader = "------BEGIN ENCRYPTED NOTE-----\n";

    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }

    private async Task Login((User?, string) data) {
        // Get passwords from cookie
        Cookie cookie = new(JsRuntime);
        string base64Passwords = (await cookie.GetValue("vault-passwords")).Replace("~", "=");
        if (base64Passwords != "") {
            string jsonPasswords = Encoding.UTF8.GetString(Convert.FromBase64String(base64Passwords));
            _passwords = jsonPasswords.FromJson<Dictionary<string, string>>()!;
        }
        
        // Get id of note (from query string)
        string? id = NavigationManager.GetQueryStrings("note");
        if (id != null) {
            _currentNote = Localisation.Localiser["loading-note"];
            ReloadText();
        }
        
        _token = data.Item2;
        await LoadAllNotes(id);
    }
    
    private async Task LoadAllNotes(string? activateNote = null) {
        SerbleApiResponse<string[]> notesList = await SerbleApiHandler.GetNotes(_token!);
        if (!notesList.Success) {
            throw new Exception("Failed to get notes");
        }
        _notes = notesList.ResponseObject;
        ReloadText();
        
        if (activateNote != null) {
            await ApplyNote(activateNote);
        }

        foreach (string note in _notes!) {
#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
            LoadNote(note);  // I don't want to wait for this, ITS TOO SLOW
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
        }
    }

    private async Task ApplyNote(string id) {
        if (!_loadedNotes.ContainsKey(id)) {
            await LoadNote(id, false, false);
        }
        string content = _loadedNotes.TryGetValue(id, out string? note) ? note : "ERROR LOADING";
        
        _currentNote = content;
        string actualContent = content;
        _currentNoteId = id;
        bool empty = _currentNote == "";

        HtmlInteractor interactor = new(JsRuntime);
        _noteIsEncrypted = content.StartsWith(EncryptionHeader);
        await interactor.SetAttribute("save-button", "disabled", "true");
        if (_noteIsEncrypted) {
            _encryptedNoteIsEmpty = content == EncryptionHeader;
            _currentDecryptedContent = null;
            if (_passwords.ContainsKey(id)) {
                await DecryptNote(false);
                actualContent = _currentDecryptedContent.ThrowIfNull();
            }
        }
        else {
            _currentDecryptedContent = null;
        }

        _noteTitles[id] = empty ? id : actualContent.Split('\n')[0];
        string description = empty ? "Empty note" : actualContent.Replace("\n", " ");
        if (description.Length > 100) {
            description = description[..100] + "...";
        }
        _contentSummaries[id] = description;
        ReloadText();
    }
    
    private async Task LoadNote(string id, bool force = false, bool reload = true) {
        if (_loadedNotes.ContainsKey(id) && !force) {
            return;
        }
        
        SerbleApiResponse<string> response = await SerbleApiHandler.GetNoteContent(_token!, id);
        if (!response.Success) {
            // Failed to get note
            throw new Exception("Failed to get note");
        }
        
        string content = response.ResponseObject!;
        _loadedNotes[id] = content;
        bool empty = content == "";

        if (content.StartsWith(EncryptionHeader) && _passwords.TryGetValue(id, out string? password)) {
            content = await VaultEncryption.Decrypt(JsRuntime, content.Replace(EncryptionHeader, ""), password);
        }

        _noteTitles[id] = empty ? id : content.Split('\n')[0];
        string description = empty ? Localisation.Localiser["empty-note"] : content.Replace("\n", " ");
        if (description.Length > 100) {
            description = description[..100] + "...";
        }
        _contentSummaries[id] = description;
        if (reload) ReloadText();
    }

    private Task UpdateNote() {
        return UpdateNote(null);
    }
    
    private async Task UpdateNote(string? content) {
        _saveButtonText = Localisation.Localiser["saving"];
        ReloadText();
        HtmlInteractor interactor = new(JsRuntime);
        string text = content ?? await interactor.GetValue("note-content");
        if (_noteIsEncrypted) {
            text = EncryptionHeader + await VaultEncryption.Encrypt(JsRuntime, text, _passwords[_currentNoteId!]);
        }
        SerbleApiResponse<string> response = await SerbleApiHandler.UpdateNoteContent(_token!, _currentNoteId!, text);
        if (!response.Success) {
            throw new Exception("Failed to update note");
        }
        // Yay it worked
        _saveButtonText = Localisation.Localiser["saved"];
        _textSaved = true;
        await interactor.SetAttribute("save-button", "disabled", "true");
        await LoadNote(_currentNoteId!, true);
        ReloadText();
    }

    private async void NewNote(bool encrypted) {
        SerbleApiResponse<string> response = await SerbleApiHandler.NewNote(_token!);
        if (!response.Success) {
            throw new Exception("Failed to create note");
        }
        string id = response.ResponseObject!;

        if (encrypted) {
            SerbleApiResponse<string> responseContent = await SerbleApiHandler.UpdateNoteContent(_token!, id!, EncryptionHeader);
            if (!responseContent.Success) {
                throw new Exception("Failed to update note");
            }
        }

        await LoadAllNotes(id);
    }
    
    private Task DecryptNote() {
        return DecryptNote(true);
    }

    private async Task DecryptNote(bool reload) {
        try {
            string password = _passwords.ContainsKey(_currentNoteId!) ? _passwords[_currentNoteId!] : await new HtmlInteractor(JsRuntime).GetValue("password");
            string decrypted = await VaultEncryption.Decrypt(JsRuntime, _currentNote!.Replace(EncryptionHeader, ""), password);
            _currentDecryptedContent = decrypted.ThrowIfNull();
            _passwords[_currentNoteId!] = password;
            SavePasswords();
            await new HtmlInteractor(JsRuntime).RemoveAttribute("save-button", "disabled");
            if (reload) ReloadText();
            Console.WriteLine("Decryption successful");
        }
        catch (Exception e) {
            Console.WriteLine("Decryption failed");
            Console.WriteLine(e);
            _incorrectPasswordAttempts++;
            if (reload) ReloadText();
        }
    }

    private async void SetPassword() {
        string password = await new HtmlInteractor(JsRuntime).GetValue("password");
        _passwords[_currentNoteId!] = password;
        SavePasswords();
        await UpdateNote("Welcome to your encrypted note!");
        await LoadNote(_currentNoteId!, true);
        await ApplyNote(_currentNoteId!);
        ReloadText();
    }

    private async void DeleteNote(string id) {
        SerbleApiResponse<string> response = await SerbleApiHandler.DeleteNote(_token!, id);
        if (!response.Success) {
            throw new Exception("Failed to delete note");
        }
        await LoadAllNotes();
        if (id == _currentNoteId) {
            await ApplyNote(_notes![0]);
        }
        ReloadText();
    }

    private async void SavePasswords() {
        string jsonPasswords = _passwords.ToJson();
        string base64Passwords = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonPasswords)).Replace("=", "~");
        Cookie cookie = new(JsRuntime);
        await cookie.SetValue("vault-passwords", base64Passwords);
    }

    private async void UserInput() {
        if (!_textSaved || _currentNoteId == null) {
            return;
        }
        _textSaved = false;
        _saveButtonText = Localisation.Localiser["save"];
        await new HtmlInteractor(JsRuntime).RemoveAttribute("save-button", "disabled");
        ReloadText();
    }
    
}