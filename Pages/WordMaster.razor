@page "/WordMaster"
@using SerbleWebsite.Data
@using SerbleWebsite.Data.Raw
@using SerbleWebsite.Data.Schemas
@inject IJSRuntime JsRuntime

<RequireLogin RedirectToLogin="false" Callback="LoginAttemptCallback"></RequireLogin>

<div class="text-center">
<h1>Word Master</h1>

<div id="game" class="container border border-info border-3 rounded bg-dark p-5">
<div>
    <div>
        <div class="d-flex flex-row justify-content-center">
            <h3 style="padding-right: 50px; padding-left: 50px">Words: @_words.Count(word => word.Item1)</h3>
            @if (_finished) {
                <h3 class="text-danger">Game Over</h3>
            }
            else {
                <h3>Time Left: @_secondsRemaining</h3>
            }
        </div>
        <h3 class="text-danger text-center">@StrikesString</h3>
    </div>

    @if (_words.Count == 0) {
        <p>Enter a word to begin...</p>
    }
    else {
        @if (_words.Last().Item1) {
            <p class="text-success">@_words.Last().Item2</p>
        }
        else {
            <p class="text-danger">@_words.Last().Item2</p>
        }
    }
</div>

    <form onsubmit="return false" class="d-flex flex-row justify-content-center">
        @if (_finished) {
            <input type="text" class="form-control w-25 text-center" id="word-input" placeholder="Enter A Word" readonly/>
        }
        else {
            <input type="text" class="form-control w-25 text-center" id="word-input" placeholder="Enter A Word"/>
        }

        @if (_finished) {
            <button class="btn btn-danger" @onclick="Reset">Reset</button>
        }
        else {
            <button class="btn btn-primary" @onclick="AddWord">Submit</button>
        }
    </form>
    @if (_newWr) {
        <h3 class="text-success">NEW WORLD RECORD!!  @WorldRecord</h3>
    }
    else {
        <h3>World Record: @WorldRecord (Held By @WorldRecordHolder)</h3>
    }
</div>
    
</div>

@code {
    private readonly List<(bool, string)> _words = new();
    private int _strikes;
    private string StrikesString => string.Join("", Enumerable.Repeat("X", _strikes));
    private Timer? _stopwatch;
    private int _secondsRemaining = 30;
    private bool _finished;
    private bool _newWr;
    private User? _currentUser;

    private int WorldRecord {
        get {
            if (_loadedRecord != -1) return _loadedRecord;
            Program.StorageService!.BasicKvGet("word-master-record", out string? value);
            _loadedRecord = value == null ? 0 : int.Parse(value);
            return _loadedRecord;
        }
    }
    
    private string WorldRecordHolder {
        get {
            if (_loadedRecordHolderName != null) return _loadedRecordHolderName;
            Program.StorageService!.BasicKvGet("word-master-record-holder", out string? value);
            value ??= "";
            Program.StorageService.GetUser(value, out User? holder);
            _loadedRecordHolderName = holder?.Username ?? "Anonymous";
            return _loadedRecordHolderName;
        }
    }

    private int _loadedRecord = -1;
    private string? _loadedRecordHolderName;

    private async void AddWord() {
        _stopwatch ??= new Timer(CountdownCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        if (_finished) return;
        
        HtmlInteractor interactor = new (JsRuntime);
        string guess = await interactor.GetValue("word-input");
        await interactor.SetValue("word-input", "");
        bool correct = RawDataManager.EnglishWords.Contains(guess.ToUpper()) && _words.All(word => word.Item2 != guess);
        _words.Add((correct, guess));
        if (!correct) _strikes++;
        if (_strikes == 3) {
            _finished = true;
            await _stopwatch.DisposeAsync();
            _stopwatch = null;
            RecordCheck();
        }
        ReloadText();
    }
    
    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }
    
    private void Reset() {
        _words.Clear();
        _strikes = 0;
        _stopwatch = null;
        _secondsRemaining = 30;
        _finished = false;
        _newWr = false;
        ReloadText();
    }
    
    private void CountdownCallback(object? o) {
        _secondsRemaining--;
        if (_secondsRemaining == 0) {
            _stopwatch!.Dispose();
            _stopwatch = null;
            _finished = true;
            RecordCheck();
        }
        ReloadText();
    }

    private void RecordCheck() {
        Program.StorageService!.BasicKvGet("word-master-record", out string? value);
        _loadedRecord = value == null ? 0 : int.Parse(value);
        int userWordCount = _words.Count(word => word.Item1);
        if (_loadedRecord >= userWordCount) return;
        // Record has been beaten
        _loadedRecord = userWordCount;
        Program.StorageService.BasicKvSet("word-master-record", userWordCount.ToString());
        Program.StorageService.BasicKvSet("word-master-record-holder", _currentUser == null ? "0" : _currentUser.Id);
        _newWr = true;
        ReloadText();
    }

    private bool LoginAttemptCallback(User? user) {
        _currentUser = user;
        return true;
    }
    
    
}