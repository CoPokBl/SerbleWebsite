@page "/Store/PurchaseAnon"
@using SerbleWebsite.Data.Schemas
@using SerbleWebsite.Data
@using System.Collections.Specialized
@inject NavigationManager NavigationManager
@inject Localiser Localiser

<LoadScript Script="https://js.stripe.com/v3/"></LoadScript>
<LoadScript Script="https://polyfill.io/v3/polyfill.min.js?version=3.52.1&features=fetch"></LoadScript>

<div class="text-center">
    <h3>@Localiser["wait-while-login"]</h3>
    
    <p>@Localiser["stuck-go-back-to-store"].Replace("[", "<a href=\"/store\">").Replace("]", "</a>").MarkupString()</p>
    
    <br/>
    <h5>Debug Info (Ignore this):</h5>
    <p>Product ID: @_product</p>
    <p>Price ID: @(_priceId)</p>
</div>

<form action="@(Constants.SerbleApiUrl + "payments/checkout")" method="POST" id="checkout-form">
    <!-- Price lookup key -->
    <input type="hidden" name="lookup_key" value="@_product"/>
    <button hidden id="checkout-and-portal-button" class="w-100 btn btn-lg btn-primary" type="submit">Subscribe</button>
</form>

@code {
    private string _product = "";
    private string? _priceId = "";

    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;
        await LoginCallback();
    }
    
    private async Task LoginCallback() {
        NameValueCollection queryValues = NavigationManager.GetQueryStrings();
        _product = queryValues["product"] ?? throw new Exception("No lookup key provided");
        _priceId = queryValues["price_id"];

        SerbleApiResponse<string> checkoutResp;

        if (_priceId == null) {
            checkoutResp = await SerbleApiHandler.GetCheckoutUrlAnon(new []{ _product });
            if (!checkoutResp.Success) {
                Console.WriteLine(checkoutResp.ErrorMessage);
                return;
            }
        }
        else {
            ProductCheckoutEntry productCheckoutEntry = new() {
                Id = _product,
                PriceId = _priceId
            };
            checkoutResp = await SerbleApiHandler.GetCheckoutUrlAnonNew(new []{ productCheckoutEntry });
            if (!checkoutResp.Success) {
                Console.WriteLine(checkoutResp.ErrorMessage);
                return;
            }
        }
        
        Console.WriteLine("Checkout URL: " + checkoutResp.ResponseObject);
        NavigationManager.NavigateTo(checkoutResp.ResponseObject!);
    }
    
}