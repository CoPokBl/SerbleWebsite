@page "/auth"
@page "/login"
@page "/appauth"
@using SerbleWebsite.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<LoginStyles></LoginStyles>

<div class="text-center form-signin">
    
    @if (_askAccess && _isAppAuth) {
        <h1>@_appName</h1>
        <p>
            @_appName would like access to your account. They will be able to access your Username and Email. 
            They CANNOT access your password. Do not click Allow unless you were sent here by @_appName and you
            trust them. They are requesting access to the following scopes:
            @foreach (string scope in _queryValues!["scope"].ToString().Split(' ')) {
                <p>- @scope</p>
            }
            <b>IF YOU DON'T UNDERSTAND THEN CLICK DENY</b>
        </p>
        <div class="d-flex" style="">
            <button class="w-100 btn btn-lg btn-primary" @onclick="a => AuthorizeApp(true)" style="margin-right: 10px">Allow</button>
            <button class="w-100 btn btn-lg btn-danger" @onclick="a => AuthorizeApp(false)" style="padding-bottom: 10px">Deny</button>
        </div>
    }
    else {
        <div>
            <img class="mb-4" src="assets/images/icon.png" alt="" width="72" height="72">
            @if (_isAppAuth) {
                <h1 class="h3 mb-3 fw-normal">Sign In to @_appName</h1>
            }
            else {
                <h1 class="h3 mb-3 fw-normal">Sign In</h1>
            }

            <p style="color: red;">
                @switch (_error) {

                    case Error.None:
                        break;

                    case Error.NullFields:
                        <p>Username and password are required</p>
                        break;

                    case Error.InvalidUser:
                        <p>User not found, need account? <a href="/register">Register</a></p>
                        break;

                    case Error.InvalidPassword:
                        <p>Incorrect password, need an account? <a href="/register">Register</a></p>
                        break;

                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </p>

            <div class="form-floating">
                <input
                    @bind="_username"
                    @oninput="ui => _username = ui.Value?.ToString()"
                    type="text"
                    class="form-control"
                    id="floatingInput"
                    placeholder="EpicGamer9000"
                    style="background-color: rgb(34, 34, 34); color: #ffffff">
                <label for="floatingInput">Username</label>
            </div>
            <div class="form-floating">
                <input
                    @bind="_password"
                    @oninput="ui => _password = ui.Value?.ToString()"
                    type="password"
                    class="form-control"
                    id="floatingPassword"
                    placeholder="Password"
                    style="background-color: rgb(34, 34, 34); color: #ffffff">
                <label for="floatingPassword">Password</label>
            </div>

            <div class="checkbox mb-3">
                <label>
                    <input
                        type="checkbox"
                        value="remember-me"
                        @bind="_rememberMe"
                        @oninput="ui => _rememberMe = bool.Parse(ui.Value?.ToString()!.ToLower()!)"> Remember me
                </label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" @onclick="Login" style="padding-bottom: 10px">Sign in</button>
            <p>Don't have an account? <a href="/register">Register for free</a></p>
        </div>
    }

</div>

@code {
    private string? _user;
    private string? _username;
    private string? _password;
    private bool _rememberMe;
    private Error _error = Error.None;
    private Dictionary<string, StringValues>? _queryValues;
    private bool _isAppAuth;
    private string _appName = "";
    private bool _askAccess;
    private string? _token;
    private readonly string[] _requiredQueryValues = {
        "redirect_uri",
        // "client_id",
        "response_type",
        "scope",
        "state"
    };
    
    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;
        Uri absoluteUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        _queryValues = QueryHelpers.ParseQuery(absoluteUri.Query);
        Cookie cookieService = new (JsRuntime);
        
        if (absoluteUri.LocalPath == "/appauth") {
            _isAppAuth = true;
            
            // Check required query parameters
            if (_requiredQueryValues.Any(requiredQueryValue => !_queryValues.ContainsKey(requiredQueryValue))) {
                NavigationManager.NavigateTo("/invalidoauth");
                return;
            }

            // Get information
            _appName = _queryValues.ContainsKey("appname") ? _queryValues["appname"] : "Unknown App";
            ReloadText();
        }
        
        // Check if user is logged in.
        string token = await cookieService.GetValue("token");
        if (token == "") {
            return;
        }
        if (!new TokenHandler(Program.Config!).ValidateCurrentToken(token, out _)) {
            return;
        }
        LoginSuccess(token);
    }
    
    protected override void OnInitialized() {
        
    }
    
    private void ReloadText() {
        InvokeAsync(StateHasChanged).Wait();
    }

    private async void Login() {
        _user = "Submited with: " + _username + " and " + _password + " and " + _rememberMe;

        if (_username == null || _password == null) {
            _error = Error.NullFields;
            return;
        }
        
        // Attempt login
        Program.StorageService!.GetUserFromName(_username, out User? user);
        
        if (user == null) {
            _error = Error.InvalidUser;
            return;
        }

        if (user.PasswordHash != Utils.Hash(_password)) {
            _error = Error.InvalidPassword;
            return;
        }
        
        // Login successful
        _error = Error.None;
        
        // Get token
        string token = new TokenHandler(Program.Config!).GenerateToken(new Dictionary<string, string> {
            { "scope", "1" },
            { "id", user.Id! }
        });
        
        // Set cookie
        Cookie cookieService = new (JsRuntime);
        await cookieService.SetValue("token", token, _rememberMe ? 365 : 1);
        Console.WriteLine("Logged in: " + user.Username);
        LoginSuccess(token);
    }

    private void LoginSuccess(string token) {
        if (!_isAppAuth) {
            // Normal login
            NavigationManager.NavigateTo("/account");
        }
        
        // App authentication
        bool thing = _queryValues!.TryGetValue("yes", out StringValues yes);
        if (thing) {
            Console.WriteLine($"Yes: {yes}");
        }
        _askAccess = true;
        _token = token;
        ReloadText();
    }

    private void AuthorizeApp(bool authorize) {
        if (!_queryValues!.ContainsKey("redirect_uri")) {
            NavigationManager.NavigateTo("/noredirect");
            return;
        }
        if (!Uri.TryCreate(_queryValues["redirect_uri"], UriKind.Absolute, out _)) {
            NavigationManager.NavigateTo("/noredirect");
            return;
        }
        string newUri = _queryValues["redirect_uri"];
        if (authorize) {
            newUri = QueryHelpers.AddQueryString(newUri, "token", _token!);
        }
        newUri = QueryHelpers.AddQueryString(newUri, "authorized", authorize ? "true" : "false");
        newUri = QueryHelpers.AddQueryString(newUri, "state", _queryValues["state"]);
        NavigationManager.NavigateTo(newUri);
    }

    enum Error {
        None,
        NullFields,
        InvalidUser,
        InvalidPassword
    }

}